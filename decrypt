# RSA decryption function
def rsa_decrypt(ciphertext, d, n):
    decrypted = [pow(chunk, d, n) for chunk in ciphertext]
    return decrypted

# Function to convert an integer to a chunk
def int_to_chunk(integer):
    return integer.to_bytes((integer.bit_length() + 7) // 8, byteorder='big').decode('utf-8', errors='replace')

# Input your values of d and n
d = 432974899  # Replace with your private key component d
n = 2156554007  # Replace with your value of n

# Replace with the received ciphertext
received_ciphertext = [423543815, 1084181851, 668688770]# Replace with the received ciphertext

# Step f: Decrypt each integer number using your private key
decrypted_integers = rsa_decrypt(received_ciphertext, d, n)

# Step g: Convert each decrypted integer to a chunk
decrypted_chunks = [int_to_chunk(integer) for integer in decrypted_integers]

# Step h: Join the chunks to get the decrypted message
decrypted_message = ''.join(decrypted_chunks)

# Step i: Print the decrypted message
print("Decrypted Message:", decrypted_message)

